name: pip build-test

on:
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false
      tags:
        description: tag
        required: false

jobs:
  create_release:
    if: github.event.inputs.tags != null
    runs-on: ubuntu-latest
    steps:
    - name: 'Clone Repository (Latest)'
      uses: actions/checkout@v2

    - name: 'Clone Repository (Custom Ref)'
      uses: actions/checkout@v2
      if: github.event.inputs.git-ref != ''
      with:
        ref: ${{ github.event.inputs.git-ref }}

    - name: 'Create Release'
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.tags }}
        release_name: Release ${{ github.event.inputs.tags }}
        draft: false
        prerelease: false

    - name: 'Output Release URL File'
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

    - name: 'Save Release URL File for publish'
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt


  build:
    needs: [create_release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-10.15]
        python-version: [3.8]

    steps:
      - name: 'Clone Repository (Latest)'
        uses: actions/checkout@v2

      - name: 'Clone Repository (Custom Ref)'
        uses: actions/checkout@v2
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}

      - name: 'set env JETSETBESSELBUILD'
        run: |
          echo "FALSE">JETSETBESSELBUILD
          echo "JETSETBESSELBUILD=$(cat JETSETBESSELBUILD)" >> $GITHUB_ENV

      - name: 'echo env TEST'
        run: |
          echo "JETSETBESSELBUILD=${{ env.JETSETBESSELBUILD }}"


      - name: 'Install swig'
        run: |
           if [ "$RUNNER_OS" == "Linux" ]; then
                sudo apt-get update; sudo apt-get install swig
           elif [ "$RUNNER_OS" == "macOS" ]; then
                brew install swig
           else
                echo "$RUNNER_OS not supported"
                exit 1
           fi

      - name: 'Setup pip'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'adapt req'
        run: |
          python .github/workflows/adapt_reqirements_to_git_action.py

      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: pip build
        run: |
          echo "JETSETBESSELBUILD=${{ env.JETSETBESSELBUILD }}"
          python setup.py clean
          python setup.py sdist bdist_wheel
          echo "JETSETBESSELBUILD=${{ env.JETSETBESSELBUILD }}"

      - name: 'pip install'
        run: |
          pip install dist/*.whl

      - name: make test env
        run: |
          cp -r jetset/tests/test*.py  .github/action_test/


      - name: test
        working-directory: .github/action_test/
        run: |
          pytest --pyargs jetset.tests.test_functions::test_jet

      - name: set pkg version
        run: |
          echo "PKG_VERSION=$(cd ../../ && python -c "import jetset;print(jetset.__version__)")" >> $GITHUB_ENV

      - name: echo pkg version
        run: |
          echo "PKG_VERSION=${{env.PKG_VERSION}}"

      - name: upload .whl
        uses: actions/upload-artifact@v2
        with:
          name: jetset-${{ env.PKG_VERSION }}-${{ matrix.os }}-pip-binary.tar.gz
          path: dist/*.whl

      - name: upload sdist
        uses: actions/upload-artifact@v2
        with:
          name: jetset-${{ env.PKG_VERSION }}-${{ matrix.os }}-src.tar.gz
          path: dist/*.tar.gz

      - name: 'Tar files'
        run: tar -cvfz pip-packages-${{ env.PKG_VERSION }}-${{ matrix.os }}.tar.gz -C ./dist/* .

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        if: github.event.inputs.tags != null
        id: get_release_info
        run: |
          echo "upload_url=$(cat release_url/release_url.txt)" >> $GITHUB_ENV


      - name: Upload Release Asset
        if: github.event.inputs.tags != null
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./pip-packages-${{ env.PKG_VERSION }}-${{ matrix.os }}.tar.gz
          asset_name: pip-packages-${{ env.PKG_VERSION }}-${{ matrix.os }}.tar.gz
          asset_content_type: application/tar+gzip
