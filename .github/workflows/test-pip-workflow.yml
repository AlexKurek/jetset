name: pip test

on:
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false
      tags:
        description: tag for release
        required: false
      skip_test:
        description: skip test
        required: false

jobs:
  clone:
    runs-on: ubuntu-latest
    steps:
    - name: 'Clone Repository (Latest)'
      uses: actions/checkout@v3

    - name: 'Clone Repository (Custom Ref)'
      uses: actions/checkout@v3
      if: github.event.inputs.git-ref != ''
      with:
        ref: ${{ github.event.inputs.git-ref }}
    
    - name: 'Create release'
      if: github.event.inputs.tags != null
      uses: softprops/action-gh-release@v1
      id : create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: Release  ${{ github.event.inputs.tags }}
        tag_name: ${{ github.event.inputs.tags }}
        draft: true
        prerelease: true

  build_pip:
    needs: [clone]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-12,ubuntu-latest]
        python-version: ['3.9']
        cibw_python: ["cp38-*", "cp39*", "cp310-*"]
        cibw_manylinux: [manylinux2014]
        cibw_arch: ["x86_64"]


    steps:
      - name: 'Clone Repository (Latest)'
        uses: actions/checkout@v3

      - name: 'Clone Repository (Custom Ref)'
        uses: actions/checkout@v3
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}

      - name: 'set env JETSETBESSELBUILD'
        run: |
          echo "FALSE">JETSETBESSELBUILD
          echo "JETSETBESSELBUILD=$(cat JETSETBESSELBUILD)" >> $GITHUB_ENV

      - name: 'echo env TEST'
        run: |
          echo "JETSETBESSELBUILD=${{ env.JETSETBESSELBUILD }}"
          python -v


      - name: 'Install swig'
        run: |
           if [ "$RUNNER_OS" == "Linux" ]; then
                sudo apt-get update; sudo apt-get install swig
           elif [ "$RUNNER_OS" == "macOS" ]; then
                brew install swig
           else
                echo "$RUNNER_OS not supported"
                exit 1
           fi

      - name: 'Setup pip'
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'adapt req'
        run: |
          python .github/workflows/adapt_reqirements_to_git_action.py

  
      - name: Build SDist and install
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install wheel
          pipx run build --sdist
          pip install dist/*.tar.gz
      
      - name: 'test sdist'
        working-directory: .github/action_test/
        run: |
          echo $(running tests!)
          pytest --disable-warnings  --pyargs  -vvv jetset.tests.test_jet_model
            
      - name: Upload SDist
        if: matrix.cibw_python == 'cp39*'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz
      
      
      #- name: Upload Release Asset sdist
      #  if: matrix.cibw_python == 'cp39*'
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   
      #  run:   gh release upload ${{ github.event.inputs.tags }} dist/*.tar.gz --clobber
      
      - name: 'Upload Src Release Asset'
        uses: softprops/action-gh-release@v1
        with:
          name: Release  ${{ github.event.inputs.tags }}
          tag_name: ${{ github.event.inputs.tags }}
          prerelease: true
          draft: true 
          files: dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      
      - uses: actions/checkout@v3
      
      - uses: actions/checkout@v3
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}

      - uses: pypa/cibuildwheel@v2.11.4
        env:
          CIBW_SKIP: "*-musllinux_*"
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_MACOS: "x86_64"
          #CIBW_TEST_COMMAND: pytest  --disable-warnings  --pyargs  -vvv jetset.tests.test_jet_model && pytest  --pyargs -vvv jetset.tests.test_hadronic_energetic && pytest  --pyargs -vvv jetset.tests.test_integration::TestIntegration
  
      - name: Show files
        run: ls -lh wheelhouse
        shell: bash
  
      - name: Verify clean directory
        run: git diff --exit-code
        shell: bash
      
      - name: 'test'
        if: github.event.inputs.skip_test != 'yes'
        working-directory: .github/action_test/
        run: |
          echo $(running tests!)
          pytest  --pyargs  -vvv jetset.tests.test_jet_model
          pytest  --pyargs -vvv jetset.tests.test_hadronic_energetic
          pytest  --pyargs -vvv jetset.tests.test_integration::TestIntegration

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*.whl
  
      - name: 'Upload Binary Release Asset'
        uses: softprops/action-gh-release@v1
        with:
          name: Release  ${{ github.event.inputs.tags }}
          prerelease: true
          draft: true
          tag_name: ${{ github.event.inputs.tags }}
          files: wheelhouse/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #- name: Upload Release Asset whl
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  run: 
      #    gh release upload ${{ github.event.inputs.tags }} wheelhouse/*.whl --clobber
        
      #- name: Upload Release Asset whl tag
      #  if: github.event.inputs.git-ref != ''
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  run: 
      #    gh release upload ${{  github.event.inputs.git-ref }} wheelhouse/*.whl --clobber
          
      
