name: conda test

on:
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false
      skip_test:
        description: skip test
        required: false

jobs:
  clone:
    runs-on: ubuntu-latest
    steps:
    - name: 'Clone Repository (Latest)'
      uses: actions/checkout@v2

    - name: 'Clone Repository (Custom Ref)'
      uses: actions/checkout@v2
      if: github.event.inputs.git-ref != ''
      with:
        ref: ${{ github.event.inputs.git-ref }}


  build_conda:
    needs: [clone]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-10.15 ]
        python-version: [ 3.8,3.9,'3.10']

    steps:
      - name: 'Clone Repository (Latest)'
        uses: actions/checkout@v2

      - name: 'Clone Repository (Custom Ref)'
        uses: actions/checkout@v2
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}

      - name: install micromamba
        uses: actions/checkout@v2
        run: |
            if [ "$RUNNER_OS" == "Linux" ]; then
              wget -qO- https://micromamba.snakepit.net/api/micromamba/linux-64/latest | tar -xvj bin/micromamba --strip-components=1
            else
              wget -qO- https://micromamba.snakepit.net/api/micromamba/osx-64/latest | tar -xvj bin/micromamba
              mv bin/micromamba ./micromamba
            fi
            ./micromamba shell init -s bash -p ~/micromamba
            mkdir -p ~/micromamba/pkgs/
     
         

      - name: 'setup micromamba'
        run: |
          export MAMBA_ROOT_PREFIX=~/micromamba
          export MAMBA_EXE=$(pwd)/micromamba
          . $MAMBA_ROOT_PREFIX/etc/profile.d/mamba.sh
          ./micromamba create -n test -python=${{ matrix.python-version }}
      
      - name: 'Install dependencies'
          shell: bash -l {0}
          run: |
            export MAMBA_ROOT_PREFIX=~/micromamba
            export MAMBA_EXE=$(pwd)/micromamba
            . $MAMBA_ROOT_PREFIX/etc/profile.d/mamba.sh
            micromamba activate test
            micromamba install -c conda-forge  conda-build pytest swig">=3.0.0"
            micromamba install -c astropy -c conda-forge --file requirements.txt



      - name: 'set env JETSETBESSELBUILD'
        run: |
          echo "FALSE">JETSETBESSELBUILD
          echo "JETSETBESSELBUILD=$(cat JETSETBESSELBUILD)" >> $GITHUB_ENV

      - name: 'echo env TEST'
        run: |
          echo "JETSETBESSELBUILD=${{ env.JETSETBESSELBUILD }}"

      - name: 'build '
        run: |
          echo "JETSETBESSELBUILD=${{ env.JETSETBESSELBUILD }}"
          python setup.py clean
          python setup.py install
          python setup.py clean
          echo "JETSETBESSELBUILD=${{ env.JETSETBESSELBUILD }}"

      - name: 'set pkg version'
        run: |
         echo "PKG_VERSION=$(cd ../../ && python -c "import jetset;print(jetset.__version__)")" >> $GITHUB_ENV

      - name: 'echo pkg version'
        run: |
          echo "PKG_VERSION=${{env.PKG_VERSION}}"

      - name: 'conda build'
        working-directory: .github/conda-pipeline/github/
        run: |
          mamba config --set anaconda_upload no
          mamba build purge
          mamba build .  -c conda-forge -c astropy
          mamba build  . --output > ./CONDABUILDJETSET.txt  
      
      - name: 'set env CONDABUILDJETSET'
        working-directory: .github/conda-pipeline/github/
        run: |
          echo $(cat CONDABUILDJETSET.txt)
          echo "CONDABUILDJETSET=$(tail -1 CONDABUILDJETSET.txt)"  >> $GITHUB_ENV

      - name: 'echo env CONDABUILDJETSET'
        working-directory: .github/conda-pipeline/github/
        run: echo "CONDABUILDJETSET=${{env.CONDABUILDJETSET}}"

      - name: 'conda install'
        run: |
          conda install --yes --offline $CONDABUILDJETSET

      #- name: 'make test env'
      #  run: |
      #    cp -r jetset/tests/test*.py  .github/action_test/

      - name: 'test'
        if: github.event.inputs.skip_test != 'yes'
        working-directory: .github/action_test/
        run: |
          echo $(running tests!)
          pytest --disable-warnings  --pyargs  -vvv jetset.tests.test_jet_model
          pytest  --pyargs -vvv jetset.tests.test_hadronic_energetic
          pytest  --pyargs -vvv jetset.tests.test_integration::TestIntegration
